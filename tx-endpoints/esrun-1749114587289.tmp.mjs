process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("C:\Users\alecs\Desktop\Electrodo\Electrodo-Pay\tx-endpoints\esrun-1749114587289.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// tx-endpoints.ts
import express from "../node_modules/express/index.js";
import { Connection, clusterApiUrl } from "../node_modules/@solana/web3.js/lib/index.cjs.js";

// ../tx-store/tx-store.ts
var txStorage = /* @__PURE__ */ new Map();
function saveTransaction(record) {
  txStorage.set(record.dealId, record);
}
function getTransactionByDealId(dealId) {
  return txStorage.get(dealId);
}

// tx-endpoints.ts
var app = express();
var connection = new Connection(clusterApiUrl("devnet"));
app.use(express.json());
app.post("/api/broadcast", async (req, res) => {
  const { txHash, dealId } = req.body;
  if (!txHash || !dealId) {
    return res.status(400).json({ error: "txHash and dealId are required" });
  }
  const timestamp = Date.now();
  saveTransaction({ txHash, dealId, timestamp });
  res.json({ success: true, txHash, dealId, timestamp });
});
app.get("/api/tx-status", async (req, res) => {
  const { dealId } = req.query;
  if (!dealId || typeof dealId !== "string") {
    return res.status(400).json({ error: "dealId is required" });
  }
  const tx = getTransactionByDealId(dealId);
  if (!tx) {
    return res.status(404).json({ error: "Transaction not found" });
  }
  const result = await connection.getConfirmedTransaction(tx.txHash, "confirmed");
  res.json({
    txHash: tx.txHash,
    status: result ? "confirmed" : "not found",
    timestamp: tx.timestamp,
    explorerUrl: `https://explorer.solana.com/tx/${tx.txHash}?cluster=devnet`
  });
});
app.listen(3e3, () => {
  console.log("Server running on port 3000");
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidHgtZW5kcG9pbnRzLnRzIiwgIi4uL3R4LXN0b3JlL3R4LXN0b3JlLnRzIl0sCiAgInNvdXJjZVJvb3QiOiAiQzpcXFVzZXJzXFxhbGVjc1xcRGVza3RvcFxcRWxlY3Ryb2RvXFxFbGVjdHJvZG8tUGF5XFx0eC1lbmRwb2ludHMiLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IGV4cHJlc3MsIHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcclxuaW1wb3J0IHsgQ29ubmVjdGlvbiwgY2x1c3RlckFwaVVybCB9IGZyb20gJ0Bzb2xhbmEvd2ViMy5qcyc7XHJcbmltcG9ydCB7IHNhdmVUcmFuc2FjdGlvbiwgZ2V0VHJhbnNhY3Rpb25CeURlYWxJZCB9IGZyb20gJy4uL3R4LXN0b3JlL3R4LXN0b3JlJztcclxuXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuY29uc3QgY29ubmVjdGlvbiA9IG5ldyBDb25uZWN0aW9uKGNsdXN0ZXJBcGlVcmwoJ2Rldm5ldCcpKTtcclxuXHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xyXG5cclxuYXBwLnBvc3QoJy9hcGkvYnJvYWRjYXN0JywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xyXG4gIGNvbnN0IHsgdHhIYXNoLCBkZWFsSWQgfSA9IHJlcS5ib2R5O1xyXG5cclxuICBpZiAoIXR4SGFzaCB8fCAhZGVhbElkKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ3R4SGFzaCBhbmQgZGVhbElkIGFyZSByZXF1aXJlZCcgfSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xyXG4gIHNhdmVUcmFuc2FjdGlvbih7IHR4SGFzaCwgZGVhbElkLCB0aW1lc3RhbXAgfSk7XHJcblxyXG4gIHJlcy5qc29uKHsgc3VjY2VzczogdHJ1ZSwgdHhIYXNoLCBkZWFsSWQsIHRpbWVzdGFtcCB9KTtcclxufSk7XHJcblxyXG5cclxuYXBwLmdldCgnL2FwaS90eC1zdGF0dXMnLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XHJcbiAgY29uc3QgeyBkZWFsSWQgfSA9IHJlcS5xdWVyeTtcclxuXHJcbiAgaWYgKCFkZWFsSWQgfHwgdHlwZW9mIGRlYWxJZCAhPT0gJ3N0cmluZycpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnZGVhbElkIGlzIHJlcXVpcmVkJyB9KTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHR4ID0gZ2V0VHJhbnNhY3Rpb25CeURlYWxJZChkZWFsSWQpO1xyXG4gIGlmICghdHgpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnVHJhbnNhY3Rpb24gbm90IGZvdW5kJyB9KTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0Q29uZmlybWVkVHJhbnNhY3Rpb24odHgudHhIYXNoLCAnY29uZmlybWVkJyk7XHJcblxyXG4gIHJlcy5qc29uKHtcclxuICAgIHR4SGFzaDogdHgudHhIYXNoLFxyXG4gICAgc3RhdHVzOiByZXN1bHQgPyAnY29uZmlybWVkJyA6ICdub3QgZm91bmQnLFxyXG4gICAgdGltZXN0YW1wOiB0eC50aW1lc3RhbXAsXHJcbiAgICBleHBsb3JlclVybDogYGh0dHBzOi8vZXhwbG9yZXIuc29sYW5hLmNvbS90eC8ke3R4LnR4SGFzaH0/Y2x1c3Rlcj1kZXZuZXRgXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuYXBwLmxpc3RlbigzMDAwLCAoKSA9PiB7XHJcbiAgY29uc29sZS5sb2coJ1NlcnZlciBydW5uaW5nIG9uIHBvcnQgMzAwMCcpO1xyXG59KTtcclxuIiwgImV4cG9ydCBpbnRlcmZhY2UgVHhSZWNvcmQge1xyXG4gIHR4SGFzaDogc3RyaW5nO1xyXG4gIGRlYWxJZDogc3RyaW5nO1xyXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xyXG59XHJcblxyXG5jb25zdCB0eFN0b3JhZ2UgPSBuZXcgTWFwPHN0cmluZywgVHhSZWNvcmQ+KCk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2F2ZVRyYW5zYWN0aW9uKHJlY29yZDogVHhSZWNvcmQpIHtcclxuICB0eFN0b3JhZ2Uuc2V0KHJlY29yZC5kZWFsSWQsIHJlY29yZCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2FjdGlvbkJ5RGVhbElkKGRlYWxJZDogc3RyaW5nKTogVHhSZWNvcmQgfCB1bmRlZmluZWQge1xyXG4gIHJldHVybiB0eFN0b3JhZ2UuZ2V0KGRlYWxJZCk7XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLE9BQU8sYUFBb0M7QUFDM0MsU0FBUyxZQUFZLHFCQUFxQjs7O0FDSzFDLElBQU0sWUFBWSxvQkFBSSxJQUFzQjtBQUVyQyxTQUFTLGdCQUFnQixRQUFrQjtBQUNoRCxZQUFVLElBQUksT0FBTyxRQUFRLE1BQU07QUFDckM7QUFFTyxTQUFTLHVCQUF1QixRQUFzQztBQUMzRSxTQUFPLFVBQVUsSUFBSSxNQUFNO0FBQzdCOzs7QURWQSxJQUFNLE1BQU0sUUFBUTtBQUNwQixJQUFNLGFBQWEsSUFBSSxXQUFXLGNBQWMsUUFBUSxDQUFDO0FBRXpELElBQUksSUFBSSxRQUFRLEtBQUssQ0FBQztBQUV0QixJQUFJLEtBQUssa0JBQWtCLE9BQU8sS0FBYyxRQUFrQjtBQUNoRSxRQUFNLEVBQUUsUUFBUSxPQUFPLElBQUksSUFBSTtBQUUvQixNQUFJLENBQUMsVUFBVSxDQUFDLFFBQVE7QUFDdEIsV0FBTyxJQUFJLE9BQU8sR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLGlDQUFpQyxDQUFDO0FBQUEsRUFDekU7QUFFQSxRQUFNLFlBQVksS0FBSyxJQUFJO0FBQzNCLGtCQUFnQixFQUFFLFFBQVEsUUFBUSxVQUFVLENBQUM7QUFFN0MsTUFBSSxLQUFLLEVBQUUsU0FBUyxNQUFNLFFBQVEsUUFBUSxVQUFVLENBQUM7QUFDdkQsQ0FBQztBQUdELElBQUksSUFBSSxrQkFBa0IsT0FBTyxLQUFjLFFBQWtCO0FBQy9ELFFBQU0sRUFBRSxPQUFPLElBQUksSUFBSTtBQUV2QixNQUFJLENBQUMsVUFBVSxPQUFPLFdBQVcsVUFBVTtBQUN6QyxXQUFPLElBQUksT0FBTyxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8scUJBQXFCLENBQUM7QUFBQSxFQUM3RDtBQUVBLFFBQU0sS0FBSyx1QkFBdUIsTUFBTTtBQUN4QyxNQUFJLENBQUMsSUFBSTtBQUNQLFdBQU8sSUFBSSxPQUFPLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyx3QkFBd0IsQ0FBQztBQUFBLEVBQ2hFO0FBRUEsUUFBTSxTQUFTLE1BQU0sV0FBVyx3QkFBd0IsR0FBRyxRQUFRLFdBQVc7QUFFOUUsTUFBSSxLQUFLO0FBQUEsSUFDUCxRQUFRLEdBQUc7QUFBQSxJQUNYLFFBQVEsU0FBUyxjQUFjO0FBQUEsSUFDL0IsV0FBVyxHQUFHO0FBQUEsSUFDZCxhQUFhLGtDQUFrQyxHQUFHLE1BQU07QUFBQSxFQUMxRCxDQUFDO0FBQ0gsQ0FBQztBQUVELElBQUksT0FBTyxLQUFNLE1BQU07QUFDckIsVUFBUSxJQUFJLDZCQUE2QjtBQUMzQyxDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=

	